# Configuration file

hookPudge {
    # Defines interation with non-playable characters. [default: true]
    B:affectsNPCs=true

    # Defines interation with players. [default: true]
    B:affectsPlayers=true

    # If true, you can hook any block regardless of its material and hardness. [default: false]
    B:canHookAnyBlock=false

    # Defines how much damage it will deal to entity on hit. [range: 0.0 ~ 100.0, default: 0.0]
    S:damage=0.0

    # Set to 'false' if you don't need this unit. [default: true]
    B:enabled=true

    # Defines the maximum weight of an entity that can be grappled.
    # Where weight = entity.width * entity.height (ex: villagerWeight = 0.6 * 1.95 = 1.17, pigWeight = 0.9 * 0.9 = 0.81) [range: 0.0 ~ 65536.0, default: 65536.0]
    S:maxEntityWeight=65536.0

    # Defines how long it can be under fire influence (in seconds). [range: 0.0 ~ 60.0, default: 10.0]
    S:resistance=10.0

    # Defines how heavy duty it can withstand. [range: 0.0 ~ 20.0, default: 10.0]
    S:strength=10.0

    CraftingRecipe {

        main {
            # Amount of output units. [range: 1 ~ 64, default: 1]
            I:amount=1

            # Recipe components list.
            # Components should be represented by its ids.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: [ingotIron], [stick]]
            S:components <
                ingotIron
                stick
             >

            # Output unit id.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: adhooks:pudge_hook]
            S:output=adhooks:pudge_hook

            # Shaped recipe pattern in format <nn nn> or <nnn nnn nnn>.
            # Where 'n' - number of recipe component (from 1 to 9).
            # Zero value (0) is for empty slot.
            # If pattern is empty, then recipe will be treated as shapeless. [default: 011 101 200]
            S:pattern=011 101 200
        }

    }

}


