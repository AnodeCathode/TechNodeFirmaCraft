# Configuration file

Rope {
    # Defines a color in ARGB (Alpha, Red, Green, Blue) hex format (0xaarrggbb) [default: 0x00000000]
    S:color=0x00000000

    # Defines how elastic the rope is. [range: 0.0 ~ 0.95, default: 0.0]
    S:elasticity=0.0

    # Defines the maximal rope length. [range: 1 ~ 80, default: 0]
    I:maxLength=0

    # Defines rope width. [range: 1.0 ~ 10.0, default: 0.0]
    S:width=0.0
}


launcherPrototype {
    # Defines how high you will be thrown upward when boost is activated [range: 0.0 ~ 3.0, default: 1.0]
    S:boostStrength=1.0

    # Defines durability of the item. [range: 0 ~ 65535, default: 0]
    I:durability=0

    # Set to 'false' if you don't need this unit. [default: true]
    B:enabled=true

    # Defines how fast the launcher reels in the rope. [range: 0.1 ~ 4.0, default: 0.0]
    S:reelingSpeed=0.0

    # Defines the material for repair on an anvil. [default: string]
    S:repair=string

    # If true, repair cost will grow for this item after each repair on an anvil. [default: false]
    B:repairCostGrow=false

    CraftingRecipe {

        main {
            # Amount of output units. [range: 1 ~ 64, default: 1]
            I:amount=1

            # Recipe components list.
            # Components should be represented by its ids.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: [ingotIron], [stone_button], [repeater]]
            S:components <
                ingotIron
                stone_button
                repeater
             >

            # Output unit id.
            # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
            # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
            # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
            # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
            # Use '*' char as meta value to specify all possible values.
            # To define multiple block states, you can use block properties instead of meta. The format is <modId:blockName:[prop1=value1, prop2=value2]>
            # Also you may use just ore dictionary name as full id.
            #  [default: adhooks:prototype_launcher]
            S:output=adhooks:prototype_launcher

            # Shaped recipe pattern in format <nn nn> or <nnn nnn nnn>.
            # Where 'n' - number of recipe component (from 1 to 9).
            # Zero value (0) is for empty slot.
            # If pattern is empty, then recipe will be treated as shapeless. [default: 321 211 113]
            S:pattern=321 211 113
        }

    }

}


